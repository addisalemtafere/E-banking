#include <random>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;
void probability_service_type();
int serviceTime(int serviceType ,int node);
void Service();
int AI,VS,VW,VD,VR=0;
random_device rd;
mt19937 gen(rd());
const int size=100;//Max customer 
double arrivalTime1[size];//Continer for customer arrival time
int probability_continer[size];//holds the accurate probablity of each service type
double serviceArray[size];
int arrivalTime[size];
int totalHour=0;
         
void main()
{
	int tt=0;
	 exponential_distribution<double> exponential(1.0/10);
	 cout<<"###########################################################"<<endl;
	 cout<<"# \t \tPROGRAMMER ADDISALEM .T\t \t   \t  #"<<endl;
	 cout<<"# \t \t ID GSR/2216/07 \t\t   \t  #"<<endl;
	 cout<<"# \t DEPT ECE STREAM COMPUTER ENGINEERING \t  \t  #"<<endl;
	 cout<<"# \t ASSIGNMENT FOR SIMULATION AND MODELING   \t  #"<<endl;
	 cout<<"# \t This is E-banking simulation \t \t  \t  #"<<endl;
	 cout<<"###########################################################"<<endl;
	  cout<<"\n This is interArrival time Generated by Eponential distribution"<<endl;
	 cout<<"_______________________________________________________________________"<<endl;
    for (int i = 0; i <size; ++i) {
		tt=exponential(gen);
      arrivalTime1[i]= tt;
    }   
  
   for (size_t i = 0; i != size; ++i)
	      {
     cout << arrivalTime1[i] << "\t";
	  totalHour=totalHour+arrivalTime1[i];
	  arrivalTime[i]=totalHour;

   }
   cout<<"total time "<<totalHour;

    probability_service_type();
	Service();
	system("Pause");
 
}


/*probability_service_type method generates the service type
	based on the given probablity the sum off all service type
	is equal with the total customer arrived 
	*/
void probability_service_type()
{
	
    for (int i = 0; i < size; ++i) {
		 uniform_int<int> unif(1, 5);
		int Servicetype=unif(gen);
			if(Servicetype==1 && AI<0.10*size)
			{
				probability_continer[i]=1;
				AI++;

			}
		else if(Servicetype==2 && VS<0.15*size)
		{
			probability_continer[i]=2;
				VS++;
			}
			else if(Servicetype==3 && VW<0.20*size)
			{
				probability_continer[i]=3;
				VW++;
			}
		else if(Servicetype==4 && VD<0.20*size)
		{
			probability_continer[i]=4;
				VD++;
			}
		else if(Servicetype==5 && AI<0.35*size)
			{
				probability_continer[i]=5;
				VR++;
			}
		else 
		{
			i=i-1;
		}
				
     
	}
	 cout<<"\n \n This is service Type  Generated by uniform distribution based on probabilty"<<endl;

	 cout<<"_______________________________________________________________________"<<endl;
	for(int i=0;i<size;i++)
	{
		cout<<probability_continer[i]<<"\t ";
	}
	cout<<"\n To be clear the probability of eah service from "<<size<<" customer "<<endl;
	cout<<"\n AI has probablity of 0.10 so ("<<AI<<") customer are for AI"<<endl;
	cout<<"\n VS has probablity of 0.15 so ("<<VS<<") customer are for VS"<<endl;
	cout<<"\n VD has probablity of 0.20 so ("<<VD<<") customer are for VD"<<endl;
	cout<<"\n VW has probablity of 0.20 so ("<<VW<<") customer are for VW"<<endl;
	cout<<"\n VR has probablity of 0.35 so ("<<VR<<") customer are for VR"<<endl<<endl;
	
}

/*in this queue method we have four queue sp11 is for Node server 1,
sp12 for node server2,sp21 is for Node 2 server 1 and finally we have 
sp22 for Node 2 server 2.all the arrived customer is distrubuted across
all server based on the service type given by the server.not only this also
it compares the smallest queue size of all the server.
	*/
void Service()
{ 
	//
	queue <double> sp11, sp12,sp21,sp22;
	bool f=true;
	int clock=2;
	for(int i=0;i<size;i++)
	{
		 int serviceType=probability_continer[i];
		 int servicTime;
		 if(serviceType==1 || serviceType==2)
		 {
			 if(sp11.empty() && serviceType==1)
			 {
				servicTime= serviceTime(1 ,1);
				serviceArray[i]=servicTime;
				sp11.push(servicTime);
				cout<<sp11.back()<<" intially served at Node 1 server 1 service type is AI"<<endl;
			 }
			 else if(sp11.empty() && serviceType==2)
			 {
				servicTime= serviceTime(2 ,1);
				serviceArray[i]=servicTime;
				sp11.push(servicTime);
				 cout<<sp11.back()<<" intially served at Node 1 server 1 service type is VS"<<endl;
				 
			 }
			 else if(sp21.empty() && serviceType==1)
			 {
				servicTime= serviceTime(1 ,2);
				serviceArray[i]=servicTime;
				sp21.push(servicTime);
				cout<<sp21.back()<<" intially served at Node 2 server 1 service type is AI"<<endl;
				 
			 }
			 else if(sp21.empty() && serviceType==2)
			 {
				servicTime= serviceTime(2 ,2);
				serviceArray[i]=servicTime;
				sp21.push(servicTime);
				cout<<sp21.back()<<" intially served at Node 2 server 1 service type is VS"<<endl;
				 
			 }
		 }
		 else if(serviceType==4 || serviceType==5)
		 {
			 if(sp12.empty() && serviceType==4)
			 {
				servicTime= serviceTime(4 ,1);
				serviceArray[i]=servicTime;
				sp12.push(servicTime);
				cout<<sp12.back()<<" intially served at Node 1 server 2 service type is VD"<<endl;
				 
			 }
			 else if(sp12.empty() && serviceType==5)
			 {
				servicTime= serviceTime(5 ,1);
				serviceArray[i]=servicTime;
				sp12.push(servicTime);
				cout<<sp12.back()<<" intially served at Node 1 server 2 service type is VR"<<endl;
				 
			 }
			 else if(sp22.empty() && serviceType==4)
			 {
				servicTime= serviceTime(4 ,2);
				serviceArray[i]=servicTime;
				sp22.push(servicTime);
				cout<<sp22.back()<<" intially served at Node 2 server 2 service type is VD "<<endl;
				 
			 }
			 else if(sp22.empty() && serviceType==5)
			 {
				servicTime= serviceTime(5 ,2);
				serviceArray[i]=servicTime;
				sp22.push(servicTime);
				cout<<sp22.back()<<" intially served at Node 2 server 2 service type is VR"<<endl;
				 
			 }
		 }

     else if(serviceType==3)
		 {
			 if(sp12.empty())
			 {
				servicTime= serviceTime(3 ,1);
				sp12.push(servicTime);
				serviceArray[i]=servicTime;
				cout<<sp12.back()<<" intially served at Node 1 server 2 service type is VD"<<endl;
				 
			 }
			 else if(sp21.empty())
			 {
				servicTime= serviceTime(3 ,1);
				serviceArray[i]=servicTime;
				sp21.push(servicTime);
				cout<<sp21.back()<<" intially served at Node 2 server 1 service type is VD"<<endl;
				 
			 }		 
			 
		 }

	}
	
	bool flag=true;
	int T1=0,T2,T3,T4=0;
	int AI1=0,VS1=0,VD1=0,VW1=0,VR1=0;//counter for each request type for Node1
	int AI2=0,VS2=0,VD2=0,VW2=0,VR2=0;//counter for each request type For Node 2
	int dsp11=0,dsp12=0,dsp21=0,dsp22=0;//holds Time delay in each Server
	int dRtype1=0,dRtype2=0,dRtype3=0,dRtype4=0,dRtype5=0;//holds Delay for each request
	for(int i=0;i<size;i++)
	{   
	
    int serviceType=probability_continer[i];   
    int servicTime;
   if(serviceType==1 )
   {
	   if(sp11.back() <=sp21.back())
	   {
		    servicTime= serviceTime(1 ,1);
			serviceArray[i]=servicTime;
			sp11.push(servicTime + sp11.back());
			if(arrivalTime[i]<sp11.back())
			{
              int value =sp11.back()-arrivalTime[i];
			   dsp11=dsp11+value;
			   dRtype1=dRtype1+servicTime+value;
			}
			else
			{
				dRtype1=dRtype1+servicTime;
			}
			
			  AI1++;
			 
	   }
	   else if(sp21.back() <sp11.back())
	   { 
		    servicTime= serviceTime(1 ,2);
			serviceArray[i]=servicTime;
			sp21.push(servicTime + sp21.back());
			if(arrivalTime[i]<sp21.back())
			{
               int value=sp21.back()-arrivalTime[i];
			   dsp21=dsp21+value;
			   dRtype1=dRtype1+servicTime+value;
			}
			else
			{
				dRtype1=dRtype1+servicTime;
			}
			AI2++;

	   }

   }
   else if(serviceType==2)
   {
	   if(sp11.back() <=sp21.back())
	   {     
		    servicTime= serviceTime(2 ,1);
			sp11.push(servicTime + sp11.back());
			if(arrivalTime[i]<sp11.back())
			{
               int value=sp11.back()-arrivalTime[i];
			   dsp11=dsp11+value;
			   dRtype2=dRtype2+servicTime+value;
			}
			else
			{
				dRtype2=dRtype2+servicTime;
			}
			VS1++;
	   }
	   else if(sp21.back() <sp11.back())
	   {
		    servicTime= serviceTime(2 ,2);
			sp21.push(servicTime + sp21.back());
			VS2++;
			if(arrivalTime[i]<sp21.back())
			{
               int value=sp21.back()-arrivalTime[i];
			   dsp21=dsp21+value;
			   dRtype2=dRtype2+servicTime+value;
			}
			else
			{

				dRtype2=dRtype2+servicTime;
			}
			if(sp21.back()>totalHour)
			{ 
			sp21.push(  sp21.back()-servicTime);
			dRtype2=dRtype2-servicTime;
			VS2--;
			}
			
			else
			{
				serviceArray[i]=servicTime;
			}
	   }

   }
   else if(serviceType==3)
   {
	   if(sp12.back() <=sp21.back())
	   {
		    servicTime= serviceTime(3 ,1);
			
			sp12.push(servicTime + sp12.back());
			VD1++;
			if(arrivalTime[i]<sp12.back())
			{
               int value=sp12.back()-arrivalTime[i];
			   dsp12=dsp12+value;
			   dRtype3=dRtype3+servicTime+value;
			}
			else
			{
				dRtype3=dRtype3+servicTime;
			}
			if(sp12.back()>totalHour)
			{
				sp12.push( sp12.back()-servicTime);
				dRtype3=dRtype3-servicTime;
				VD1--;
			}
			else
			{
				serviceArray[i]=servicTime;
			}

			
	   }
	   else  if(sp21.back() <sp12.back())
	   {
		    servicTime= serviceTime(3 ,2);			
			sp21.push(servicTime + sp21.back());
			VD2++;
			if(arrivalTime[i]<sp21.back())
			{
               int value=sp21.back()-arrivalTime[i];
			   dsp21=dsp21+value;
			   dRtype3=dRtype3+servicTime+value;
			}
			else
			{
				dRtype3=dRtype3+servicTime;
			}
			if(sp21.back()>totalHour)
			{
			sp21.push( sp21.back()-servicTime);
			dRtype3=dRtype3-servicTime;
			VD2--;
			}
			else
			{
				serviceArray[i]=servicTime;
			}
			
	   }
	    
   }
    else if(serviceType==4 )
   {
	   if(sp12.back() <=sp22.back())
	   {
		    servicTime= serviceTime(4 ,1);
			sp12.push(servicTime + sp12.back());
			VW1++;
			if(arrivalTime[i]<sp12.back())
			{
               int value=sp12.back()-arrivalTime[i];
			   dsp12=dsp12+value;
			   dRtype4=dRtype4+servicTime+value;
			}
			else
			{
				dRtype4=dRtype4+servicTime;
			}
		if(sp12.back()>totalHour)
			{
				sp12.push( sp12.back()-servicTime);
				dRtype4=dRtype4-servicTime;
				VW1--;
			}
		else
		{
			serviceArray[i]=servicTime;
		}


	   }
	   else if(sp22.back() <sp12.back())
	   {
		    servicTime= serviceTime(4 ,2);
			sp22.push(servicTime + sp22.back());
			VW2++;
			if(arrivalTime[i]<sp22.back())
			{
               int value=sp22.back()-arrivalTime[i];
			   dsp22=dsp22+value;
			   dRtype4=dRtype4+servicTime+value;
			}
			else
			{
				dRtype4=dRtype4+servicTime;
			}
		if(sp22.back()>totalHour)
			{ 
			 sp22.push( sp22.back()-servicTime);
			 dRtype4=dRtype4-servicTime;
			VW2--;
			}

			else
			{
				serviceArray[i]=servicTime;
			}

	   }

   }
    else if(serviceType==5)
   {
	   if(sp12.back() <=sp22.back())
	   {
		    servicTime= serviceTime(5 ,1);
			sp12.push(servicTime + sp12.back());
			VR1++;
			if(arrivalTime[i]<sp12.back())
			{
               int value=sp12.back()-arrivalTime[i];
			   dsp12=dsp12+value;
			   dRtype5=dRtype5+servicTime+value;
			}
			else
			{
				dRtype5=dRtype5+servicTime;
			}
		if(sp12.back()>totalHour)
			{
				sp12.push( sp12.back()-servicTime);
				dRtype5=dRtype5-servicTime;
				VR1--;
			}
		else
			{
				serviceArray[i]=servicTime;
			}
	   }
	   else if(sp22.back() <sp12.back())
	   {
		    servicTime= serviceTime(5 ,2);
			sp22.push(servicTime + sp22.back());
			VR2++;
			if(arrivalTime[i]<sp22.back())
			{
               int value=sp22.back()-arrivalTime[i];
			   dsp22=dsp22+value;
			   dRtype5=dRtype5+servicTime+value;
			}
			else
			{
				dRtype5=dRtype5+servicTime;
			}
			if(sp22.back()>totalHour)
			{ 
			sp22.push( sp22.back()-servicTime);
			dRtype5=dRtype5-servicTime;
			VR2--;
			}
			else
			{
				serviceArray[i]=servicTime;
			}
	   }

   }
	
	

   }
	int sp11Total=sp11.back();
	int sp12Total=sp12.back();
	int sp21Total=sp21.back();
	int sp22Total=sp22.back();
	/*cout<<"\n "<<dsp11;
	cout<<"\n "<<dsp12;
	cout<<"\n "<<dsp21;
	cout<<"\n "<<dsp22;
	cout<<"\n\n "<<dRtype1;
	cout<<"\n "<<dRtype2;
	cout<<"\n "<<dRtype3;
	cout<<"\n "<<dRtype4;
	cout<<"\n "<<dRtype5;*/
	cout<<"\n Service Time for Each Requests"<<endl;
	cout<<"_______________________________________________________________________"<<endl;
	for(int k=0;k<size;k++)
	{ cout<<serviceArray[k]<<"\t";
	}
	 cout<<"\n-----------------------------------------------------------------------"<<endl;
	 int Tnode1=AI1+VS1+VD1+VW1+VR1;//total customer in node1
	 int Tnode2=AI2+VS2+VD2+VW2+VR2;;//total customer at node 2
	int TotalCustomer=AI1+VS1+VD1+VW1+VR1+AI2+VS2+VD2+VW2+VR2;
	
	int sizeSp11=sp11.size();
	int sizeSp12=sp12.size();
	int sizeSp21=sp21.size();
	int sizeSp22=sp22.size();
	int TotalServiceTime=sp11Total+sp12Total+sp21Total+sp22Total;
	bool fla=true;
	while(!sp11.empty())
	{
		     if(fla==true)
			  {
			 cout<<"\n \n This is Total Customer served in NODE 1 Sever 11  \t"<<endl;
			 cout<<"\t"<<AI1<<"\t customers Requests for AI"<<endl;
			 cout<<"\t"<<VS1<<"\t customers  Requests for VS"<<endl;
			  cout<<'\t'<<sp11.size()<<" total customer served \n"<<endl;
	         cout<<"_______________________________________________________________________"<<endl;
			
			 fla=false;
			  }
			 cout<<sp11.front()<<"\t";
			
			 sp11.pop();			
	}
	
	 cout<<"\n-----------------------------------------------------------------------"<<endl;
	fla=true;
	while(!sp12.empty())
	{
		     if(fla==true)
			 {
			cout<<"\n \n This is Total Customer served in NODE 1 Sever 12  \t"<<endl;
			cout<<"\t"<<VD1<<"\t customers Requests for VD"<<endl;
			cout<<"\t"<<VW1<<"\t customers  Requests for VW"<<endl;
			cout<<"\t"<<VW1<<"\t customers  Requests for VR"<<endl;
			cout<<'\t'<<sp12.size()<<" total customer served \n"<<endl;
	        cout<<"_______________________________________________________________________"<<endl;
			
			fla=false;
			 }
			 cout<<sp12.front()<<"\t";
			 sp12.pop();			
	}
	 cout<<"\n-----------------------------------------------------------------------"<<endl;
	fla=true;
	while(!sp21.empty())
	{
		     if(fla==true)
			 {
		    cout<<"\n \n This is Total Customer served in NODE 2 Sever 21  \t"<<endl;
			cout<<"\t"<<AI2<<"\t customers Requests for AI"<<endl;
			cout<<"\t"<<VS2<<"\t customers  Requests for VS"<<endl;
			cout<<"\t"<<VD2<<"\t customers  Requests for VD"<<endl;
			cout<<'\t'<<sp21.size()<<" total customer served \n "<<endl;
	        cout<<"_______________________________________________________________________"<<endl;
			
			fla=false;
			 }
			 cout<<sp21.front()<<"\t";
			 sp21.pop();			
	}
	 cout<<"\n-----------------------------------------------------------------------"<<endl;
	fla=true;
	while(!sp22.empty())
	{
		     if(fla==true)
			 {
			cout<<"\n \n This is Total Customer served in NODE 2 Sever 22  \t"<<endl;
			cout<<"\t"<<VW2<<"\t customers  Requests for VW"<<endl;
			cout<<"\t"<<VR2<<"\t customers  Requests for VR"<<endl;
			cout<<'\t'<<sp22.size()<<" total customer served \n "<<endl;
	        cout<<"_______________________________________________________________________"<<endl;
			
			fla=false;
			 }
			 cout<<sp22.front()<<"\t";
			 sp22.pop();			
	}
	 cout<<"\n-----------------------------------------------------------------------"<<endl;
	 int total=AI1+VS1+VD1+VW1+VR1+AI2+VS2+VD2+VW2+VR2;
	 cout<<"Total served for AI "<<AI1+AI2<<endl;
	 cout<<"Total served for VS "<<VS1+VS2<<endl;
	 cout<<"Total served for VD "<<VD1+VD2<<endl;
	 cout<<"Total served for VW "<<VW1+VW2<<endl;
	 cout<<"Total served for VR "<<VR1+VR2<<endl;
	 cout<<"Total customer served in all server \t"<<total<<endl;
	 cout<<"\nNumber of customer that are not served \t"<<size-TotalCustomer<<endl;
	 cout<<"_______________________________________________________________________"<<endl;
	 cout<<"Server process utilizations"<<endl;
	
	  float serverUtlizationsp11=(sp11Total*100)/totalHour;
	  float serverUtlizationsp12=(sp12Total*100)/totalHour;
	  float serverUtlizationsp21=(sp21Total*100)/totalHour;
	  float serverUtlizationsp22=(sp22Total*100)/totalHour;
	 cout<<"\tServer utlization is for Node 1 SERVER 11 is "<<serverUtlizationsp11<<"%"<<endl;
	 cout<<"\tServer utlization is for Node 1 SERVER 12 is "<<serverUtlizationsp12<<"%"<<endl;
	 cout<<"\tServer utlization is for Node 2 SERVER 21 is "<<serverUtlizationsp21<<"%"<<endl;
	 cout<<"\tServer utlization is for Node 2 SERVER 22 is "<<serverUtlizationsp22<<"%"<<endl;
	 cout<<"-----------------------------------------------------------------------\n"<<endl;


	 double totalT=0;
		for(int i=0;i<=size;i++)
		{
		uniform_real_distribution<double> distribution(0.3, 1024);
		double v1=distribution(gen);
		uniform_real_distribution<double> distribution1(0.3, 2048);
		double v2=distribution1(gen);
		uniform_real_distribution<double> distribution2(0.4, 8096);
		double v3=distribution2(gen);
		double v4=(v1+v2+v3)/3;
		 totalT=totalT+v4;
		
		}
		double accumulativeTotal=totalT/size;
		double TransmissionNode1=(Tnode1*accumulativeTotal+2048)/(2*Tnode1*2500);
		double TransmissionNode2=(Tnode2*accumulativeTotal+2048)/(2*Tnode1*2500);

	 cout<<"_______________________________________________________________________"<<endl;
	 cout<<"Transmission network utilization"<<endl;
	 cout<<"\tTransmission network utilization for Node 1  "<<TransmissionNode1*100<<"%"<<endl;
	 cout<<"\tTransmission network utilization for Node 2  "<<TransmissionNode2*100<<"%"<<endl;
	 cout<<"-----------------------------------------------------------------------\n"<<endl;
	
	 cout<<"_______________________________________________________________________"<<endl;
	 cout<<"Reponse Time=waitingTime + Tpmonitor Time(.05)+Network Delay"<<endl;
	 cout<<"Average response time for each service request type"<<endl;
	 cout<<"\tAverage response time for AI "<<dRtype1*0.05<<"  MINUTE"<<endl;
	 cout<<"\tAverage response time for VS "<<dRtype2*.05<<"  MINUTE"<<endl;
	 cout<<"\tAverage response time for VD "<<dRtype3*.05<<"  MINUTE"<<endl;
	 cout<<"\tAverage response time for VW "<<dRtype4*.05<<"  MINUTE"<<endl;
	 cout<<"\tAverage response time for VR "<<dRtype5*.05<<"  MINUTE"<<endl;

	 cout<<"-----------------------------------------------------------------------\n"<<endl;

	cout<<"_______________________________________________________________________"<<endl;
	 cout<<"Average delay at server process queues"<<endl;
	 cout<<"\tAverage delay at server process queue for Node 1 SERVER 11 is "<<dsp11/sizeSp11<<"  MINUTE"<<endl;
	 cout<<"\tAverage delay at server process queue for Node 1 SERVER 12 is "<<dsp12/sizeSp12<<"  MINUTE"<<endl;
	 cout<<"\tAverage delay at server process queue for Node 2 SERVER 21 is "<<dsp21/sizeSp21<<"  MINUTE"<<endl;
	 cout<<"\tAverage delay at server process queue for Node 2 SERVER 22 is "<<dsp22/sizeSp22<<"  MINUTE"<<endl;
	 cout<<"-----------------------------------------------------------------------\n"<<endl;
	  
}

	   
/*in this E-banking system all service Type in each node
have different service time so this method generates the service 
time of all customer based on service Type and  node.
so we have 10 different uniform distribution that return service time.
	*/
int serviceTime(int serviceType ,int node)
{
	int servicetime1;
	if(serviceType==1  && node==1)
	{
		uniform_int<int> unif(4, 8);
		 servicetime1=unif(gen);		
	}
	else if(serviceType==2  && node==1)
	{
		uniform_int<int> unif(10, 18);
		 servicetime1=unif(gen);		
	}
	else if(serviceType==3  && node==1)
	{
		uniform_int<int> unif(12, 22);
		servicetime1=unif(gen);		
	}
	else if(serviceType==4  && node==1)
	{
		uniform_int<int> unif(8, 15);
	    servicetime1=unif(gen);		
	}
	else if(serviceType==5  && node==1)
	{
		uniform_int<int> unif(15, 30);
		 servicetime1=unif(gen);		
	}
	else if(serviceType==1  && node==2)
	{
		uniform_int<int> unif(12, 16);
		 servicetime1=unif(gen);		
	}
	else if(serviceType==2  && node==2)
	{
		uniform_int<int> unif(15, 27);
		 servicetime1=unif(gen);		
	}
	else if(serviceType==3  && node==2)
	{
		uniform_int<int> unif(4, 8);
		 servicetime1=unif(gen);		
	}
	else if(serviceType==4  && node==2)
	{
		uniform_int<int> unif(12, 16);
		 servicetime1=unif(gen);		
	}
	else if(serviceType==5  && node==2)
	{
		uniform_int<int> unif(22, 45);
		 servicetime1=unif(gen);		
	}
		return servicetime1;
}








